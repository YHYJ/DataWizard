# 标注了'FIXME'的是必须赋值的参数
# 标注了'CHANGED'的是可能需要修改的参数
# 标注了'NOTE'的是也许使用默认值即可的参数

[main]
number = 120                                # CHANGED: 池中总的进程/线程数，为0则取值CPU核心数，一般取值为数据点个数即可
data_source = 'mqtt'                        # CHANGED: 数据来源，可选值：mqtt
data_storage = 'timescale'                  # CHANGED: 数据持久化方案，可选值：timescale

[source]
# 数据来源配置
    [source.mqtt]
    host = '127.0.0.1'                      # CHANGED: MQTT broker服务地址
    port = 1883                             # CHANGED: MQTT broker服务地址
    username = ''                           # CHANGED: 用户名，mqtt允许匿名则留空
    password = ''                           # CHANGED: 密码，mqtt允许匿名则留空
    client_id = ''                          # CHANGED: 客户端ID，为空则使用随机值
    topics = ['topic']                      # FIXME: 发布/订阅的主题
    qos = 1                                 # CHANGED: 服务质量，可选值为：0, 1, 2
    keepalive = 60                          # CHANGED: 心跳包发送时间间隔


[storage]
# 数据存储配置
    [storage.timescale]
    # 数据库连接参数
    host = '127.0.0.1'                      # CHANGED: TimescaleDB服务器地址
    port = 5432                             # NOTE: TimescaleDB服务器端口
    user = 'postgres'                       # FIXME: TimescaleDB用户名
    password = 'postgres'                   # FIXME: TimescaleDB密码
    dbname = 'postgres'                     # CHANGED: 要使用的数据库名
        [storage.timescale.pool]
        # 数据库连接池配置信息
        mincached=10                        # NOTE: 池中空闲连接初始数量，default = 10
        maxcached=0                         # NOTE: 池中最大空闲连接数，0或None表示池大小不受限制
        maxshared=0                         # NOTE: 共享连接的最大数目，0或None表示所有连接都是专用的
        maxconnections=0                    # NOTE: 通常允许的最大连接数，0或None表示不受限制
        blocking=true                       # NOTE: 连接数超出最大值时的行为，true表示阻塞直到有连接可用，false表示报告错误
        maxusage=0                          # NOTE: 单个连接的最大复用次数，当达到该次数时该连接自动重置，0或None表示无限制
        ping=1                              # NOTE: 何时检查连接：0/None - 永不；1(default) - 从pool中获取连接时；2 - 创建cursor时；4 - 执行查询时；7 - 始终
        [storage.timescale.table]
        # 预定义各个表的timestamp、id列名
        column_time = 'timestamp'           # CHANGED: Hypertable的时间戳列名
        column_id = 'id'                    # CHANGED: Table的ID列名
        [storage.timescale.log]
        # 是否要处理数据中的日志信息
        fork_switch = false                 # CHANGED: 是否要将数据中的日志类信息集中到独立的log表里
        log_schema = 'monitor'              # CHANGED: 独立log的schema
        log_table = 'log'                   # CHANGED: 独立log的table
        log_column = [                      # CHANGED: 独立log的column
            'message', 'level',
            'source', 'logpath'
        ]


[log]
console = true                              # CHANGED: 是否要将log输出到STDOUT，只在调试时有用，正式部署时需要关闭
console_level = 'DEBUG'                     # NOTE: 日志等级，可选值为'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
file = true                                 # NOTE: 是否要将log输出到文件中
file_level = 'DEBUG'                        # NOTE: 日志等级，可选值为'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
log_file = 'logs/log.log'                   # NOTE: log文件存储路径
max_size = 10240000                         # NOTE: 单个log文件大小，单位KB
backup_count = 10                           # NOTE: 最大log文件数
format_string = '(%(asctime)s), %(levelname)s, <%(threadName)s>, %(module)s, %(funcName)s, [%(lineno)d]: %(message)s'
